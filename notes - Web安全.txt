单点登录（SSO）
	在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统。
	
	子域：设置顶域cookie，使之所有子域系统都共享cookie，同时通过共享session的方式，实现同时登陆。
	
	跨域：CAS标准流程：
	1	用户访问app系统，app系统是需要登录的，但用户现在没有登录。
	2	跳转到CAS server，即SSO登录系统，以后CAS Server我们统一叫做SSO系统。 SSO系统也没有登录，弹出用户登录页。
	3	用户填写用户名、密码，SSO系统进行认证后，将登录状态写入SSO的session，浏览器（Browser）中写入SSO域下的Cookie。
	4	SSO系统登录完成后会生成一个ST（Service Ticket），然后跳转到app系统，同时将ST作为参数传递给app系统。
	5	app系统拿到ST后，从后台向SSO发送请求，验证ST是否有效。
	6	验证通过后，app系统将登录状态写入session并设置app域下的Cookie。
总结：
单点登录（SSO系统）是保障各业务系统的用户资源的安全 。
各个业务系统获得的信息是，这个用户能不能访问我的资源。
单点登录，资源都在各个业务系统这边，不在SSO那一方。 用户在给SSO服务器提供了用户名密码后，作为业务系统并不知道这件事。 SSO随便给业务系统一个ST，那么业务系统是不能确定这个ST是用户伪造的，还是真的有效，所以要拿着这个ST去SSO服务器再问一下，这个用户给我的ST是否有效，是有效的我才能让这个用户访问。

HTTPS 防中间人
	网络安全是一个数学题、又是一个逻辑推理题，其特征是：一步错，步步错。
	换句话说，网络安全环环相扣，一个环掉链子，整个链子就断了，没有安全性可言。
	CA的自签名数字证书是CA的RSA公钥，这个公钥预装在PC的操作系统里，由于是预装，我们绝对相信这个公钥是可靠的！（我们如果连微软都不相信了，下面的内容就不用看了）
	既然CA的公钥是可信的，这是我们接下来一切推理的前提，如果用这个公钥可以解密对方出示的任何证明材料，那么对方就是用CA私钥加密的！既然CA私钥只有CA唯一知道，所以对方是CA的亲笔签名无疑！
	RSA公钥是明文，所以任何人都可以得到CA的公钥，那谁唯一拥有CA的RSA私钥呢？废话！肯定是CA本人了！

为什么叫RSA公钥、私钥呢？
	因为是运行RSA公钥算法，才可以得到一一对应的公钥、私钥。	

公钥、私钥有何特点？
	公钥加密的，私钥可以解密；
	私钥加密的，公钥可以解密。
	但公钥加密的，公钥无法解密；
	私钥加密的，私钥也无法解密！
	此乃非对称加密！
	
数字证书认证
	当服务器S向客户端C出示数字证书，其实是一个证书链
	1） CA自签名证书（含有CA私钥签名的指纹）
	2） CA给S签名的证书 （也含有CA私钥签名的指纹）
	
	由于C拥有CA的公钥，
	1）验证成功
	2）用CA的公钥，成功验证是CA私钥的签名，于是信任服务器S的公钥，因为证书2）里包含服务器的公钥
	Okay，获得了服务器S的公钥，也认证通过了，这时需要S与C协商用于加密数据的session key了。
	
	有两个算法：
	1）DH算法
		S 筛选出自己的素数对 S1、S2 4.21 0.81
		C筛选出自己的素数对 C1、C2
		S与C交换各自的S2、C2
		S拥有了S1、C2，DH可以算出一个master key
		C拥有了C1、S2，DH可以算出一个master key
		两个master key 完全一样！
		这就是神奇的DH算法！
		任何第三方都无法根据截获的S2、C2算出master key。
		S、C用共同的公式，再推导出session key ，这个session key 只有S、C知晓，所以用此key 加密的数据是安全的、第三方是无法破解的。
		但如果浏览器把C1、S2导出到wireshark，Wireshark是可以计算出master key，再推导出session key 的，因为DH算法公开。
		那么就可以解密S、C之间的加密流量。
	2）RSA算法
		C随机选取一个master key ，用S 的公钥加密，S解密，得到明文的master key，剩下过程和DH算法类似，不在重复！
		如果浏览器把master key 导出到wireshark 里，同样也可以解密用户流量。
		看，整个过程就是一个逻辑推理题，但不容许任何一步是逻辑错误的！
		其实，严格意义上来说，Wireshark破解流量不算中间人攻击，是客户端主动泄密的结果，用于debug 、trouble shooting 而已。
		如果题主的客户端不主动泄密(like wireshark)，试问谁可以破解https流量呢？

HTTPS劫持
	https，经过正规CA颁发证书的，无法别劫持。https 就是为了解决这个问题
	
	https 被劫持的情况：
		1.客户单安装的伪造的CA证书，然后被代理服务器劫持。
		2.没有认证的证书，客户端选择信任。
	
《白帽子WEB安全》

（*）CIA安全标准：机密性Confidentiality、完整性Integrity、可用性Availability
	C：保护数据内容不能泄露，加密是实现机密性要求的常见手段
	I：完整性要求保护数据内容是完整、没有被篡改的。常见的保证技术是数字签名。
	A：随需而得，保证服务可用的能力。
	
（*）实战兵法：设计安全方案的原则
	① Secure By Default （总则）
		- 黑名单、白名单 
		- 最小权限原则：只授予主体其必须的权限
	② Defence in Depth：纵深防御原则 （更全面更正确地看待问题）
		- 不同层面综合防御，避免“木桶效应”
		- 在正确的地方做正确的事情，针对威胁的本质进行防御。如：XSS的危害根源在浏览器
	③ 数据与代码分离原则	（从漏洞成因看问题）
		- 对代码和数据要有清晰的认识，如XSS就是典型的代码和数据界限不清，数据注入成代码导致安全问题
	④ 不可预测性原则 （从克服攻击方法的角度看问题）
		- 要使攻击者难以摸索系统信息的相关规律
	
	
	
